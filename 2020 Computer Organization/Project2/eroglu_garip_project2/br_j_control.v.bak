module br_j_control(branch,status,out_j_control);
input [1:0] branch,status;
output out_j_control;
reg[1:0] out_j_control;
reg clk;
initial
begin
clk = 0;
forever #20  clk=~clk;
end

always @(posedge clk)
begin
if((~branch[1]) & (~branch[0])) out_j_control=2'b00;					//Jump instructionlar? için kosulsuz atlama
else if(branch[1] & branch[0]&status[1] & (~status[0])) out_j_control=2'b11;		// beq için atlama
else if(branch[1] & (~branch[0]) & (~status[0])) out_j_control=2'b11;			// bgez için atlama
else if((~branch[1]) & branch[0] & status[1]) out_j_control=2'b10;			// balz için atlama
else out_j_control=2'b00;
end

endmodule

/*
	00 - Ordinar path
	01 - Jumpaddress ( 26 bit )
	10 - Balz ( 26 bit ) 
	11 - brench pc-relative

*/
